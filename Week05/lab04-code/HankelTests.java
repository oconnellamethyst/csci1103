import org.junit.*;
import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

public class HankelTests extends KTests {
  /*Main method runs tests in this file*/ 
  public static void main(String args[]) {
    org.junit.runner.JUnitCore.main("HankelTests");
  } 
  @Test public void Hankel_main1() {
    String input = "5";
    TextIO.readStream(new StringReader(input));
    String expect = 
      "Size of Hankel Matrix: (ex: 8)\n"+
      " 1  2  3  4  5 \n"+
      " 2  3  4  5  6 \n"+
      " 3  4  5  6  7 \n"+
      " 4  5  6  7  8 \n"+
      " 5  6  7  8  9 \n"+
      "";
    Hankel.main(empty);
    String actual = localOut.toString();
    checkOutput(input,expect,actual);
  }
  @Test public void Hankel_main2() {
    String input = "9";
    TextIO.readStream(new StringReader(input));
    String expect = 
      "Size of Hankel Matrix: (ex: 8)\n"+
      " 1  2  3  4  5  6  7  8  9 \n"+
      " 2  3  4  5  6  7  8  9 10 \n"+
      " 3  4  5  6  7  8  9 10 11 \n"+
      " 4  5  6  7  8  9 10 11 12 \n"+
      " 5  6  7  8  9 10 11 12 13 \n"+
      " 6  7  8  9 10 11 12 13 14 \n"+
      " 7  8  9 10 11 12 13 14 15 \n"+
      " 8  9 10 11 12 13 14 15 16 \n"+
      " 9 10 11 12 13 14 15 16 17 \n"+
      "";
    Hankel.main(empty);
    String actual = localOut.toString();
    checkOutput(input,expect,actual);
  }
  @Test public void Hankel_main3() {
    String input = "11";
    TextIO.readStream(new StringReader(input));
    String expect = 
      "Size of Hankel Matrix: (ex: 8)\n"+
      " 1  2  3  4  5  6  7  8  9 10 11 \n"+
      " 2  3  4  5  6  7  8  9 10 11 12 \n"+
      " 3  4  5  6  7  8  9 10 11 12 13 \n"+
      " 4  5  6  7  8  9 10 11 12 13 14 \n"+
      " 5  6  7  8  9 10 11 12 13 14 15 \n"+
      " 6  7  8  9 10 11 12 13 14 15 16 \n"+
      " 7  8  9 10 11 12 13 14 15 16 17 \n"+
      " 8  9 10 11 12 13 14 15 16 17 18 \n"+
      " 9 10 11 12 13 14 15 16 17 18 19 \n"+
      "10 11 12 13 14 15 16 17 18 19 20 \n"+
      "11 12 13 14 15 16 17 18 19 20 21 \n"+
      "";
    Hankel.main(empty);
    String actual = localOut.toString();
    checkOutput(input,expect,actual);
  }
  @Test public void Hankel_main4() {
    String input = "15";
    TextIO.readStream(new StringReader(input));
    String expect = 
      "Size of Hankel Matrix: (ex: 8)\n"+
      " 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 \n"+
      " 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 \n"+
      " 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 \n"+
      " 4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 \n"+
      " 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 \n"+
      " 6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 \n"+
      " 7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 \n"+
      " 8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n"+
      " 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \n"+
      "10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \n"+
      "11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \n"+
      "12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n"+
      "13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \n"+
      "14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \n"+
      "15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \n"+
      "";
    Hankel.main(empty);
    String actual = localOut.toString();
    checkOutput(input,expect,actual);
  }
  @Test public void Hankel_main5() {
    String input = "31";
    TextIO.readStream(new StringReader(input));
    String expect = 
      "Size of Hankel Matrix: (ex: 8)\n"+
      " 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \n"+
      " 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \n"+
      " 3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \n"+
      " 4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \n"+
      " 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \n"+
      " 6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \n"+
      " 7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \n"+
      " 8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \n"+
      " 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \n"+
      "10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \n"+
      "11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \n"+
      "12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \n"+
      "13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \n"+
      "14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \n"+
      "15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \n"+
      "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \n"+
      "17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \n"+
      "18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \n"+
      "19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \n"+
      "20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n"+
      "21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \n"+
      "22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n"+
      "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \n"+
      "24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \n"+
      "25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \n"+
      "26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \n"+
      "27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \n"+
      "28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 \n"+
      "29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \n"+
      "30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 \n"+
      "31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \n"+
      "";
    Hankel.main(empty);
    String actual = localOut.toString();
    checkOutput(input,expect,actual);
  }


}
